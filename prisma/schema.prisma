generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                         @id @default(uuid())
  role                         Role                           @default(USER)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  lastLogin                    DateTime?
  publicKey                    String                         @unique
  userName                     String                         @unique
  profileImage                 String?
  bio                          String?
  withdrawals                  LnWithdrawal[]
  invoices                     Invoice[]
  withdrawalsFinal             Withdrawal[]
  mentionedUsersOnContentItems MentionedUsersOnContentItems[]
  contentItems                 ContentItem[]
}

model LnAuthentication {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  k1        String   @unique
  pubkey    String?
}

model LnWithdrawal {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  k1           String   @unique
  withdrawalId String?
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
}

model Invoice {
  id             String    @id @default(uuid())
  lndId          String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  hash           String    @unique
  bolt11         String
  expiresAt      DateTime
  confirmedAt    DateTime?
  mSatsRequested Int
  mSatsReceived  Int?
  cancelled      Boolean   @default(false)
  user           User?     @relation(fields: [userId], references: [id])
  userId         String?
}

model Withdrawal {
  id             String            @id @default(uuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  hash           String
  bolt11         String
  mSatsPaying    Int
  mSatsPaid      Int?
  mSatsFeePaying Int
  mSatsFeePaid   Int?
  user           User?             @relation(fields: [userId], references: [id])
  userId         String?
  status         WithdrawalStatus?
}

enum WithdrawalStatus {
  CONFIRMED
  INSUFFICIENT_BALANCE
  INVALID_PAYMENT
  PATHFINDING_TIMEOUT
  ROUTE_NOT_FOUND
  UNKNOWN_FAILURE
}

enum Role {
  USER
  JANITOR
  ADMIN
}

model ContentItem {
  id                        String                         @id @default(uuid())
  contentItemSourceId       String?
  contentItemSource         ContentItem?                   @relation("ContentItemSource", fields: [contentItemSourceId], references: [id])
  contentItemSourceChildren ContentItem[]                  @relation("ContentItemSource")
  contentStatus             ContentStatus                  @default(PUBLISHED)
  createdAt                 DateTime                       @default(now())
  updatedAt                 DateTime                       @updatedAt
  content                   Json
  title                     String
  slug                      String?                        @unique
  excerpt                   String?
  authorId                  String
  headerImage               String?
  author                    User                           @relation(fields: [authorId], references: [id])
  mentionedUsers            MentionedUsersOnContentItems[]
  tags                      TagsOnContentItems[]
  parentId                  String?
  parent                    ContentItem?                   @relation("ContentItemRelation", fields: [parentId], references: [id])
  children                  ContentItem[]                  @relation("ContentItemRelation")
}

enum ContentStatus {
  PUBLISHED
  SOFT_DELETED
}

model Tag {
  id           String               @id @default(uuid())
  privileged   Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  name         String               @unique
  contentItems TagsOnContentItems[]
}

model MentionedUsersOnContentItems {
  contentItemId String
  userId        String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([contentItemId, userId])
}

model TagsOnContentItems {
  contentItemId String
  tagId         String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentItemId, tagId])
}

model Wallet {
  id          Int     @id @default(autoincrement())
  displayName String
  description String?
  url         String
  icon        String
  rank        Int
}
