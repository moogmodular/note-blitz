generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                         @id @default(uuid())
  role                         Role                           @default(USER)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  lastLogin                    DateTime?
  publicKey                    String                         @unique
  userName                     String                         @unique
  profileImage                 String?
  bio                          String?
  mentionedUsersOnContentItems MentionedUsersOnContentItems[]
  contentItems                 ContentItem[]
  transactionRecieved          Transaction[]                  @relation("recipient")
  transactionSent              Transaction[]                  @relation("sender")
}

model Transaction {
  id            String            @id @default(uuid())
  createdAt     DateTime          @default(now())
  type          TransactionReason @default(PAYMENT_IN)
  amount        Int
  fromUserId    String?
  fromUser      User?             @relation("recipient", fields: [fromUserId], references: [id])
  toUserId      String?
  toUser        User?             @relation("sender", fields: [toUserId], references: [id])
  contentItem   ContentItem?      @relation(fields: [contentItemId], references: [id])
  contentItemId String?
}

enum TransactionReason {
  PAYMENT_OUT
  PAYMENT_IN
  TIP_CONTENT_ITEM
  UNLOCK_POST_COMMENT
}

model LnAuth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
  k1        String   @unique
  pubkey    String?
}

enum Role {
  USER
  JANITOR
  ADMIN
}

model ContentItem {
  id                        String                         @id @default(uuid())
  contentItemSourceId       String?
  contentItemSource         ContentItem?                   @relation("ContentItemSource", fields: [contentItemSourceId], references: [id])
  contentItemSourceChildren ContentItem[]                  @relation("ContentItemSource")
  contentStatus             ContentStatus                  @default(PUBLISHED)
  createdAt                 DateTime                       @default(now())
  updatedAt                 DateTime                       @updatedAt
  content                   Json
  title                     String
  slug                      String?                        @unique
  excerpt                   String?
  authorId                  String
  headerImage               String?
  author                    User                           @relation(fields: [authorId], references: [id])
  relatedTransactions       Transaction[]
  mentionedUsers            MentionedUsersOnContentItems[]
  tags                      TagsOnContentItems[]
  parentId                  String?
  parent                    ContentItem?                   @relation("ContentItemRelation", fields: [parentId], references: [id])
  children                  ContentItem[]                  @relation("ContentItemRelation")
}

enum ContentStatus {
  PUBLISHED
  SOFT_DELETED
}

model Tag {
  id           String               @id @default(uuid())
  privileged   Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  name         String               @unique
  contentItems TagsOnContentItems[]
}

model MentionedUsersOnContentItems {
  contentItemId String
  userId        String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([contentItemId, userId])
}

model TagsOnContentItems {
  contentItemId String
  tagId         String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentItemId, tagId])
}

model lnurl_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model lnurl_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}
